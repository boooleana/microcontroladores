###INCLUDES

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/sysctl.h"
#include "driverlib/adc.h"
#include "driverlib/timer.h"
#include "inc/tm4c123gh6pm.h"
#include "driverlib/hibernate.h"
#include "driverlib/interrupt.h"
#include "Nokia5110.h"
#include "bitmap.h"

###


int main(void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA); //habilitando interrupcoes no portal A
    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ); 

    //----------tela
    Nokia5110_Init();
    Nokia5110_Clear();

//------------------------ TIMER PRA TROCAR A TELA ----------------------------------|
    IntMasterEnable();
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1);
    TimerConfigure(TIMER1_BASE, TIMER_CFG_ONE_SHOT);
    TimerLoadSet(TIMER1_BASE, TIMER_A, SysCtlClockGet()*10);
    IntEnable(INT_TIMER1A);
    TimerIntEnable(TIMER1_BASE, TIMER_TIMA_TIMEOUT);

    //------------------------ TERMOMETRO DO TIVA ---------------------------------------|

    uint32_t temp_vetor[1];

    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_TS);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_TS);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_TS);
    ADCSequenceStepConfigure(ADC0_BASE,1,3,ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END);
    ADCSequenceEnable(ADC0_BASE, 1);
    //-----------------------------------------------------------------------------------|
    TimerEnable(TIMER1_BASE, TIMER_A);

while(1)
    {
    }

}

void Timer1IntHandler(void){
    TimerIntClear(TIMER1_BASE, TIMER_TIMA_TIMEOUT); // reinicia o valor do timer

#####CODIGO
    if(option==0){
        media_temperatura(auxiliar);
    }
    if(option==1){
        media_temperatura(auxiliar);
        //temperatura();
    }
    option = (option+1)%2;
#####

    TimerEnable(TIMER1_BASE, TIMER_A); //reinicia o timer
}

____________________________________________________________________________________________________________

void GPIOF_Handler(){
    GPIOIntDisable(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);		//DISABLE GPIOF - sempre desabilitar (em alguns exemplos esta no final da função)
    //Criando a função que vai ler os botoes SW1 e SW2
    unsigned int leitura = GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
    GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
    //Habiltiando o timer
    TimerEnable(TIMER0_BASE, TIMER_A);

	if(leitura == GPIO_PIN_0){
	}
	if(leitura == GPIO_PIN_4){
	}


}

void Timer0IntHandler(){
    //Limpa as fontes de interrupção do temporizador
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

    GPIOIntEnable(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4); 		//ENABLE GPIOF

    TimerDisable(TIMER0_BASE, TIMER_A);
}

//  Configurando o timer display
void setup_Timer_display(){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_TIMER0)){}
    TimerIntRegister(TIMER0_BASE, TIMER_A, Timer0IntHandler);
    TimerConfigure(TIMER0_BASE, TIMER_CFG_A_ONE_SHOT);
    TimerLoadSet(TIMER0_BASE, TIMER_A, 7000000);
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
}

//Configuração dos GPIO utilizados no display
void setup_GPIO_display(){
        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
        while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF)){}
        HWREG(GPIO_PORTF_BASE +  GPIO_O_LOCK) = GPIO_LOCK_KEY;
        HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
        HWREG(GPIO_PORTF_BASE +  GPIO_O_LOCK) = 0;
        GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4);
        GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_0);
        GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
        GPIOIntDisable(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_0);
        GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3);
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);
        GPIOIntRegister(GPIO_PORTF_BASE, GPIOF_Handler);
        GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_0, GPIO_FALLING_EDGE);
        GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
        GPIOIntEnable(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_0);
}

int main(void)
 {
    Nokia5110_Init();
    Nokia5110_Clear();
    Nokia5110_ClearBuffer();
    set_Cursor(0, 0);
    setup_GPIO_display();  
    setup_Timer_display();
    IntMasterEnable();


   while(1){
       display(); //funcao pra desenhar display
       SysCtlDelay(SysCtlClockGet() / 12);
       Nokia5110_Clear();

   }
}
